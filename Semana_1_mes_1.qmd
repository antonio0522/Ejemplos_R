---
title: "Semana 1"
format: html     
editor: visual   
---

## Ejemplo 1 (Creación y utilización de variable)

En est ejemplo se utilizara la libreria dplyr que empleará filter.

```{r,message=FALSE}
library(dplyr)
```

Puede ser útil emplear una lista para una condición. En ese caso se ha de realizar.

```{r,message=FALSE}
setosa <- iris %>%
  filter(Species=="setosa")
head(setosa, 5)
```

La función table realiza tablas de frecuencia (cuenta registros), en este caso se tienen los tres posibles valores que toma la variable Species con el número de registros que tiene cada elemento de la variable, el número de registros que tiene cada nivel del factor, hay un factor que no tiene registros, no desaparece el nivel, simplemente aparece con 0 observaciones.

```{r,message=FALSE}
species_to_select = c("setosa","virginica")
species <- iris %>%
  filter(Species %in% species_to_select)

table(species$Species)
```

### Ejemplo 2 (Implementacion de ejemplos graficos)

Se procede a dibujar el gráfico de la función y=x\^2−3x+30 entre −15 y 15. De título, poner "Una parábola". De etiquetas, en el eje 0X, en formato matemático, "x"; y en el eje 0Y, introducir y=x2−3x+30 , también en formato matemático.Se utiliza la función curve()

```{r}
y<-function(x){x^2-3*x+30}
plot(y, xlim = c(-15,15), main = "UNA PARÁBOLA", xlab = expression(x), ylab = expression(x^2-3*x+30), col = "blue")
```

```{r}
curve(y, xlim = c(-15,15), col = "red", lty = 2, xaxp = c(-15,15,6), yaxp = c(0,300,30), main = "UNA PARÁBOLA")
```

### Ejemplo 3 (Libreria lubridate)

En este ejemplo se procede a utilizar las siguientes librerias

```{r, message=FALSE}
library(lubridate)
library(tidyverse)
```

En este paso se procede ha asignar una fecha a cada variable.

```{r}
date1 <- as_date("2018-04-16")
date2 <- as_date("2018-05-16")
```

Luego de asignar las fechas estipuladas, se procede a contar la cantidad de dias que hay entre una fecha y la otra automaticamente

```{r}
date2-date1
```

### Asignación 1

Se coloca las librerias que utilizaremos

```{r}
library(DT)
```

En esta parte se procede seleccionar el archivo donde se tranajará.

Luego de seleccionar y leer el archivo con nombre lista-empresa.csv, se procede ha selecionar la tabla etiqueta y Link con la función selec que serán donde se trabajará los datos.

```{r}
documento_csv <- read.csv("C:\\Users\\anton\\OneDrive\\Documentos\\Ejemplos_R\\lista-empresas.csv")
Etiqueta_csv <-select(documento_csv, Etiqueta)
Link_csv <-select(documento_csv, Link)
```

En esta parte se procede a crear una variable con nombre hipervinculo, en la misma se acumulará los link y los nombres de cada banco que aparece en Etiquetas.

```{r}
Hipervinculo <- list()
for (indice in 1:length(Etiqueta_csv$Etiqueta)){
  Etiqueta <- (getElement(Etiqueta_csv$Etiqueta, indice))
  Link <- (getElement(Link_csv$Link, indice))
  Hipervinculo <- c(Hipervinculo, paste0("<a href=",Link,">",Etiqueta,"</a>"))
}
```

Luego de haber optenido los link y las etiquetas, se procede a transformar los resultados a data.frame.

```{r}
Direccion_url <- Hipervinculo %>% do.call(rbind,.) %>% data.frame(Paginas = .)
```

En este paso se realiza un filtro de las tablas que se desea mostrar, en este caso sería industria, departamentos y la direccion_url que contiene almacenados los hipervinculos con las direcciones web de cada banco.

```{r}
Filtro_final <-select(documento_csv, Industria, Derpartmento) %>% cbind(.,Direccion_url)
```

Por ultimo se imprime la variable que contiene todos los resultados implementados anteriormente

```{r}
Filtro_final %>% datatable(escape = FALSE)
```

### Asignacion 2

Librerias que vamos ha utilizar

```{r}
library(DT)
library(readxl)
```

Se ubica el archivo que vamos a leer en formato xlsx, y se sub-divide las columnas que vamos a trabajar

```{r}
documento <- read_xlsx("C:\\Users\\anton\\OneDrive\\Documentos\\Ejemplos_R\\Datos_ejemplo_2.xlsx")
Categoria_xlsx <- select(documento, Category)
Link_xlsx <- select(documento, Link)
```

Se realiza la operacion de implementar el hipervinculo, utilizando el link de las paginas y las categorias asignadas

```{r}
Hipervinculo <- list()
for (indice in 1:length(Categoria_xlsx$Category)){
  Category <- (getElement(Categoria_xlsx$Category, indice))
  Link <- (getElement(Link_xlsx$Link, indice))
  Hipervinculo <- c(Hipervinculo, paste0("<a href=",Link,">",Category,"</a>"))
  Hipervinculo
}
```

Se determina los link que vamos a utilizar

```{r}
Direccion_url <- Hipervinculo %>% do.call(rbind,.) %>% data.frame(Paginas = .)
```

Se procede a seleccionar la tabla que vamos a imprimir, en este caso la de Area y imprimimos los resultados optenidos en la variable Direccion_url

```{r}
Filtro_final <-select(documento, Area) %>% cbind(.,Direccion_url)
```

En este ultimo paso se imprime los resultados en formato datatable

```{r}
Filtro_final %>% datatable(escape = FALSE)
```

### Asignacion 3

Se plantea la libretia que se utilizará

```{r}
library(stringr)
```

Se selecciona el archivo que se ejecutara

```{r}
documento_original <- read.csv("C:\\Users\\anton\\OneDrive\\Documentos\\Ejemplos_R\\DatosPeronales.csv")
```

En este paso se selecciona el archivo que se ejecutara, se procede a seleciconar las columnas que se dividirán y se restructura la tabla en 4 columnas, que seria nombre, edad, provincia y distrito

```{r}
documento_dividido <- (documento_original %>% separate(Nombre, into = c("Nombre", "Edad"), sep = "[/-]") %>% separate(Dirección, into = c("Provincia", "Distrito"), sep = "-"))
datatable(documento_dividido)
```

### Asignación 3 (Convertir PDf a XLSX)

Estas serian las librerias a utilizar.

```{r}
library(DT)
library(readxl)
```

Luego de convertir el archivo PDF a xlsx se procede a leer el archivo y imprimirlo en un datatable.

Debo mencionar que para convertir el documento utilicé un convertidor online llamado Adobe.

```{r}
datatable(Archivo_Excel_Nuevo<-read_xlsx("C:\\Users\\anton\\OneDrive\\Documentos\\Ejemplos_R\\datos_energia.xlsx"))
```
