[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Trabajos realizados Practica profesional",
    "section": "",
    "text": "#datos de la primera parte\nyear &lt;- c('2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018')\nproduccion &lt;- c(11, 13, 11, 8, 12, 11, 12, 8, 10)\n \n# graficando con codigo\n plot(x = year, y = produccion)\n\n\n\n# editando la grafica\n plot(x = year, y = produccion, main = 'produccion', xlab = '', ylab = '', col =  'cornflowerblue', pch = 16, panel.first = grid ())\n \n \n# Graficas con ggplot2\n# install.package(ggplot2) # para instalar ggplot2\nlibrary(ggplot2)\n\n\n\n# hacer dataframe\npeliculas &lt;- data.frame(year, \n                        produccion)\n \n# graficar utilizando ggplot\n ggplot(data = peliculas, mapping = aes(x = year, y = produccion)) + geom_point() + labs(title = 'produccion')\n\n\n\n\n\n\n\nEn este ejemplo se utilizara las librerias stringr que tiene la funcion de manipular cadenas: copiar, cambiar caracteres, comparar cadenas, etc.\n\nlibrary(stringr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nEn esta parte se crea un vector con distintos nombre, luego se agrupa por medio de una coma, para que al momento de la impresion quede ordemadamente y separados por coma.\n\nx &lt;- c (\"why\", \"video\", \"cross\", \"extra\", \"deal\", \"authority\")\nstr_length(x)\n\n[1] 3 5 5 5 4 9\n\nstr_c(x, collapse = \",\")\n\n[1] \"why,video,cross,extra,deal,authority\"\n\n\nAqui se realiza un filtrado de datos en la linea de caracteres que tenemos en el vector X, con la finalidad de, mostrar la primera vocal de cada palabra que encontramos en las palabras mostradas en el vector\n\nstr_extract(string = x, pattern = \"[aeiou]\")\n\n[1] NA  \"i\" \"o\" \"e\" \"e\" \"a\"\n\n\nEn este proceso se analiza los caracteres asignados en la variable palabra, donde le solicitamos mostrar los caracteres que se encuentran entre la posición 5 hasta la posición 13.\n\npalabra &lt;- \"Univesidad de Panama\"\nstr_sub(string = palabra, start = 5, end = 13)\n\n[1] \"esidad de\"\n\n\n\n\n\nSe coloca las librerias que utilizaremos\n\nlibrary(DT)\n\nEn esta parte se procede seleccionar el archivo donde se tranajará.\nLuego de seleccionar y leer el archivo con nombre lista-empresa.csv, se procede ha selecionar la tabla etiqueta y Link con la función selec que serán donde se trabajará los datos.\n\ndocumento_csv &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\lista-empresas.csv\")\nEtiqueta_csv &lt;-select(documento_csv, Etiqueta)\nLink_csv &lt;-select(documento_csv, Link)\n\nEn esta parte se procede a crear una variable con nombre hipervinculo, en la misma se acumulará los link y los nombres de cada banco que aparece en Etiquetas.\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Etiqueta_csv$Etiqueta)){\n  Etiqueta &lt;- (getElement(Etiqueta_csv$Etiqueta, indice))\n  Link &lt;- (getElement(Link_csv$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Etiqueta,\"&lt;/a&gt;\"))\n}\n\nLuego de haber optenido los link y las etiquetas, se procede a transformar los resultados a data.frame.\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nEn este paso se realiza un filtro de las tablas que se desea mostrar, en este caso sería industria, departamentos y la direccion_url que contiene almacenados los hipervinculos con las direcciones web de cada banco.\n\nFiltro_final &lt;-select(documento_csv, Industria, Derpartmento) %&gt;% cbind(.,Direccion_url)\n\nPor ultimo se imprime la variable que contiene todos los resultados implementados anteriormente\n\nFiltro_final %&gt;% datatable(escape = FALSE)\n\n\n\n\n\n\n\n\n\nLibrerias que vamos ha utilizar\n\nlibrary(DT)\nlibrary(readxl)\n\nSe ubica el archivo que vamos a leer en formato xlsx, y se sub-divide las columnas que vamos a trabajar\n\ndocumento &lt;- read_xlsx(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\Datos_ejemplo_2.xlsx\")\nCategoria_xlsx &lt;- select(documento, Category)\nLink_xlsx &lt;- select(documento, Link)\n\nSe realiza la operacion de implementar el hipervinculo, utilizando el link de las paginas y las categorias asignadas\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Categoria_xlsx$Category)){\n  Category &lt;- (getElement(Categoria_xlsx$Category, indice))\n  Link &lt;- (getElement(Link_xlsx$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Category,\"&lt;/a&gt;\"))\n  Hipervinculo\n}\n\nSe determina los link que vamos a utilizar\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nSe procede a seleccionar la tabla que vamos a imprimir, en este caso la de Area y imprimimos los resultados optenidos en la variable Direccion_url\n\nFiltro_final &lt;-select(documento, Area) %&gt;% cbind(.,Direccion_url)\n\nEn este ultimo paso se imprime los resultados en formato datatable\n\nFiltro_final %&gt;% datatable(escape = FALSE)\n\n\n\n\n\n\n\n\n\nSe plantea la libretia que se utilizará\n\nlibrary(stringr)\n\nSe selecciona el archivo que se ejecutara\n\ndocumento_original &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\DatosPeronales.csv\")\n\nEn este paso se selecciona el archivo que se ejecutara, se procede a seleciconar las columnas que se dividirán y se restructura la tabla en 4 columnas, que seria nombre, edad, provincia y distrito\n\ndocumento_dividido &lt;- (documento_original %&gt;% separate(Nombre, into = c(\"Nombre\", \"Edad\"), sep = \"[/-]\") %&gt;% separate(Dirección, into = c(\"Provincia\", \"Distrito\"), sep = \"-\"))\ndocumento_dividido\n\n    Nombre Edad Provincia  Distrito\n1    Juan    12    Coclé   Penonomé\n2     Ana    20    Coclé       Natá\n3   Pedro    34    Coclé        Olá\n4    Rosa     5    Coclé      Antón\n5  Esther    56    Coclé   Penonomé\n6   Mario    17    Coclé   Penonomé\n7  Javier    45    Coclé       Natá\n8  Carlos    23    Coclé        Olá\n9   Dilia    22    Coclé      Antón\n10 Indira    15    Coclé   Penonomé"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#ejemplo-1",
    "href": "index.html#ejemplo-1",
    "title": "Ejemplos_R",
    "section": "",
    "text": "En este paso se coloca la librería que utilizaremos, en este caso sería tidyverse\n\n\nlibrary(tidyverse)\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\n\nluego procedemos ha crear una variable con nombre datos, la misma se le asignará el archivo que se leerá, en este caso sería el archivo con nombre Datos_Ejemplo, el mismo contiene un formato csv.\n\nPor otra parte se utiliza la función read_csv, esta función se encarga de leer un fichero de valores separados por comas (formato CSV) y lo vuelca en un dataframe, incluyéndo gran candidad de parámetros para determinar cómo se realiza la lectura y cómo deberán tratarse los datos leídos\n\ndatos &lt;- read_csv(\"Datos_Ejemplo.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 22 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): ;Base de datos de productos;;;;;;;;\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nPor ultimo se imprime la información de los datos leidos\n\n\ndatos\n\n# A tibble: 22 × 1\n   `;Base de datos de productos;;;;;;;;`                                        \n   &lt;chr&gt;                                                                        \n 1 ;;;;;;;;;                                                                    \n 2 IdProducto;NombreProducto;Proveedor;Categoría;CantidadPorUnidad;PrecioUnidad…\n 3 1;Té Dharamsala;Exotic Liquids;Bebidas;10 cajas x 20 bolsas;18.00 €;39;0;10;…\n 4 2;Cerveza tibetana Barley;Exotic Liquids;Bebidas;24 - bot. 12 l;19.00 €;17;4…\n 5 3;Sirope de regaliz;Exotic Liquids;Condimentos;12 - bot. 550 ml;10.00 €;13;7…\n 6 4;Especias Cajun del chef Anton;New Orleans Cajun Delights;Condimentos;48 - …\n 7 5;Mezcla Gumbo del chef Anton;New Orleans Cajun Delights;Condimentos;36 caja…\n 8 6;Mermelada de grosellas de la abuela;Grandma Kelly's Homestead;Condimentos;…\n 9 7;Peras secas orgánicas del tío Bob;Grandma Kelly's Homestead;Frutas/Verdura…\n10 8;Salsa de arándanos Northwoods;Grandma Kelly's Homestead;Condimentos;12 - f…\n# ℹ 12 more rows"
  },
  {
    "objectID": "index.html#ejemplo-1-1",
    "href": "index.html#ejemplo-1-1",
    "title": "Ejemplos_R",
    "section": "Ejemplo 1",
    "text": "Ejemplo 1\n\n#Se procedio a realizar las instalaciones de los paquetes a utilizar\n#install.packages(\"tidyverse\")\nlibrary(gapminder)\nlibrary(tidyverse)\ndata(\"gapminder\")\n#Se muestra una base de datos como ejemplo\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n#Se realiza filtracion de datos\nfilter(gapminder, country =='Mexico')\n\n# A tibble: 12 × 6\n   country continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Mexico  Americas   1952    50.8  30144317     3478.\n 2 Mexico  Americas   1957    55.2  35015548     4132.\n 3 Mexico  Americas   1962    58.3  41121485     4582.\n 4 Mexico  Americas   1967    60.1  47995559     5755.\n 5 Mexico  Americas   1972    62.4  55984294     6809.\n 6 Mexico  Americas   1977    65.0  63759976     7675.\n 7 Mexico  Americas   1982    67.4  71640904     9611.\n 8 Mexico  Americas   1987    69.5  80122492     8688.\n 9 Mexico  Americas   1992    71.5  88111030     9472.\n10 Mexico  Americas   1997    73.7  95895146     9767.\n11 Mexico  Americas   2002    74.9 102479927    10742.\n12 Mexico  Americas   2007    76.2 108700891    11978."
  },
  {
    "objectID": "index.html#ejemplo-2",
    "href": "index.html#ejemplo-2",
    "title": "Ejemplos_R",
    "section": "Ejemplo 2",
    "text": "Ejemplo 2\n\n#Se procedio a realizar las instalaciones de los paquetes a utilizar\n#install.packages(\"tidyverse\")\nlibrary(gapminder)\nlibrary(tidyverse)\ndata(\"gapminder\")\n#Se muestra una base de datos como ejemplo\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n#Se realiza filtracion de datos\nfilter(gapminder, country =='Mexico')\n\n# A tibble: 12 × 6\n   country continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Mexico  Americas   1952    50.8  30144317     3478.\n 2 Mexico  Americas   1957    55.2  35015548     4132.\n 3 Mexico  Americas   1962    58.3  41121485     4582.\n 4 Mexico  Americas   1967    60.1  47995559     5755.\n 5 Mexico  Americas   1972    62.4  55984294     6809.\n 6 Mexico  Americas   1977    65.0  63759976     7675.\n 7 Mexico  Americas   1982    67.4  71640904     9611.\n 8 Mexico  Americas   1987    69.5  80122492     8688.\n 9 Mexico  Americas   1992    71.5  88111030     9472.\n10 Mexico  Americas   1997    73.7  95895146     9767.\n11 Mexico  Americas   2002    74.9 102479927    10742.\n12 Mexico  Americas   2007    76.2 108700891    11978."
  },
  {
    "objectID": "index.html#ejemplo-3",
    "href": "index.html#ejemplo-3",
    "title": "Ejemplos_R",
    "section": "Ejemplo 3",
    "text": "Ejemplo 3"
  },
  {
    "objectID": "index.html#ejemplo-4",
    "href": "index.html#ejemplo-4",
    "title": "Ejemplos_R",
    "section": "Ejemplo 4",
    "text": "Ejemplo 4\nEn este ejemplo se utilizara las librerias stringr que tiene la funcion de manipular cadenas: copiar, cambiar caracteres, comparar cadenas, etc.\n\nlibrary(stringr)\nlibrary(tidyverse)\n\nEn esta parte se crea un vector con distintos nombre, luego se agrupa por medio de una coma, para que al momento de la impresion quede ordemadamente y separados por coma.\n\nx &lt;- c (\"why\", \"video\", \"cross\", \"extra\", \"deal\", \"authority\")\nstr_length(x)\n\n[1] 3 5 5 5 4 9\n\nstr_c(x, collapse = \",\")\n\n[1] \"why,video,cross,extra,deal,authority\"\n\n\nAqui se realiza un filtrado de datos en la linea de caracteres que tenemos en el vector X, con la finalidad de, mostrar la primera vocal de cada palabra que encontramos en las palabras mostradas en el vector\n\nstr_extract(string = x, pattern = \"[aeiou]\")\n\n[1] NA  \"i\" \"o\" \"e\" \"e\" \"a\"\n\n\nEn este proceso se analiza los caracteres asignados en la variable palabra, donde le solicitamos mostrar los caracteres que se encuentran entre la posición 5 hasta la posición 13.\n\npalabra &lt;- \"Univesidad de Panama\"\nstr_sub(string = palabra, start = 5, end = 13)\n\n[1] \"esidad de\""
  },
  {
    "objectID": "index.html#ejemplo-1-leer-archivo-csv-con-la-libreria-tidyverse",
    "href": "index.html#ejemplo-1-leer-archivo-csv-con-la-libreria-tidyverse",
    "title": "Trabajos realizados Practica profesional",
    "section": "",
    "text": "En este paso se coloca la librería que utilizaremos, en este caso sería tidyverse\n\n\nlibrary(tidyverse)\n\n\nluego procedemos ha crear una variable con nombre datos, la misma se le asignará el archivo que se leerá, en este caso sería el archivo con nombre Datos_Ejemplo, el mismo contiene un formato csv.\n\nPor otra parte se utiliza la función read_csv, esta función se encarga de leer un fichero de valores separados por comas (formato CSV) y lo vuelca en un dataframe, incluyéndo gran candidad de parámetros para determinar cómo se realiza la lectura y cómo deberán tratarse los datos leídos\n\ndatos &lt;- read_csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\Datos_Ejemplo.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 22 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): ;Base de datos de productos;;;;;;;;\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nPor ultimo se imprime la información de los datos leidos\n\n\ndatos\n\n# A tibble: 22 × 1\n   `;Base de datos de productos;;;;;;;;`                                        \n   &lt;chr&gt;                                                                        \n 1 \";;;;;;;;;\"                                                                  \n 2 \"IdProducto;NombreProducto;Proveedor;Categor\\xeda;CantidadPorUnidad;PrecioUn…\n 3 \"1;T\\xe9 Dharamsala;Exotic Liquids;Bebidas;10 cajas x 20 bolsas;18.00 \\x80;3…\n 4 \"2;Cerveza tibetana Barley;Exotic Liquids;Bebidas;24 - bot. 12 l;19.00 \\x80;…\n 5 \"3;Sirope de regaliz;Exotic Liquids;Condimentos;12 - bot. 550 ml;10.00 \\x80;…\n 6 \"4;Especias Cajun del chef Anton;New Orleans Cajun Delights;Condimentos;48 -…\n 7 \"5;Mezcla Gumbo del chef Anton;New Orleans Cajun Delights;Condimentos;36 caj…\n 8 \"6;Mermelada de grosellas de la abuela;Grandma Kelly's Homestead;Condimentos…\n 9 \"7;Peras secas org\\xe1nicas del t\\xedo Bob;Grandma Kelly's Homestead;Frutas/…\n10 \"8;Salsa de ar\\xe1ndanos Northwoods;Grandma Kelly's Homestead;Condimentos;12…\n# ℹ 12 more rows"
  },
  {
    "objectID": "index.html#ejemplo-2-se-utiliza-la-libreria-gapminder-para-los-datos-que-vamos-a-leer-y-se-filtra-con-filter",
    "href": "index.html#ejemplo-2-se-utiliza-la-libreria-gapminder-para-los-datos-que-vamos-a-leer-y-se-filtra-con-filter",
    "title": "Trabajos realizados Practica profesional",
    "section": "Ejemplo 2 (Se utiliza la libreria gapminder para los datos que vamos a leer y se filtra con filter)",
    "text": "Ejemplo 2 (Se utiliza la libreria gapminder para los datos que vamos a leer y se filtra con filter)\n\n#Se procedio a realizar las instalaciones de los paquetes a utilizar\n#install.packages(\"tidyverse\")\nlibrary(gapminder)\nlibrary(tidyverse)\ndata(\"gapminder\")\n#Se muestra una base de datos como ejemplo\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n#Se realiza filtracion de datos\nfilter(gapminder, country =='Mexico')\n\n# A tibble: 12 × 6\n   country continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Mexico  Americas   1952    50.8  30144317     3478.\n 2 Mexico  Americas   1957    55.2  35015548     4132.\n 3 Mexico  Americas   1962    58.3  41121485     4582.\n 4 Mexico  Americas   1967    60.1  47995559     5755.\n 5 Mexico  Americas   1972    62.4  55984294     6809.\n 6 Mexico  Americas   1977    65.0  63759976     7675.\n 7 Mexico  Americas   1982    67.4  71640904     9611.\n 8 Mexico  Americas   1987    69.5  80122492     8688.\n 9 Mexico  Americas   1992    71.5  88111030     9472.\n10 Mexico  Americas   1997    73.7  95895146     9767.\n11 Mexico  Americas   2002    74.9 102479927    10742.\n12 Mexico  Americas   2007    76.2 108700891    11978."
  },
  {
    "objectID": "index.html#ejemplo-3-implementacion-de-graficas-utilizando-librerias-ggplot2",
    "href": "index.html#ejemplo-3-implementacion-de-graficas-utilizando-librerias-ggplot2",
    "title": "Ejemplos_R",
    "section": "Ejemplo 3 (Implementacion de graficas utilizando librerias ggplot2)",
    "text": "Ejemplo 3 (Implementacion de graficas utilizando librerias ggplot2)\n\n#datos de la primera parte\nyear &lt;- c('2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018')\nproduccion &lt;- c(11, 13, 11, 8, 12, 11, 12, 8, 10)\n \n# graficando con codigo\n plot(x = year, y = produccion)\n\n\n\n# editando la grafica\n plot(x = year, y = produccion, main = 'produccion', xlab = '', ylab = '', col =  'cornflowerblue', pch = 16, panel.first = grid ())\n\n\n\n# Graficas con ggplot2\n# install.package(ggplot2) # para instalar ggplot2\nlibrary(ggplot2)\n \n# hacer dataframe\npeliculas &lt;- data.frame(year, \n                        produccion)\n \n# graficar utilizando ggplot\n ggplot(data = peliculas, mapping = aes(x = year, y = produccion)) + geom_point() + labs(title = 'produccion')"
  },
  {
    "objectID": "index.html#ejemplo-3-implementación-de-graficas-utilizando-libreria-ggplot2",
    "href": "index.html#ejemplo-3-implementación-de-graficas-utilizando-libreria-ggplot2",
    "title": "Trabajos realizados Practica profesional",
    "section": "Ejemplo 3 (Implementación de graficas utilizando libreria ggplot2)",
    "text": "Ejemplo 3 (Implementación de graficas utilizando libreria ggplot2)\n\n#datos de la primera parte\nyear &lt;- c('2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018')\nproduccion &lt;- c(11, 13, 11, 8, 12, 11, 12, 8, 10)\n \n# graficando con codigo\n plot(x = year, y = produccion)\n\n\n\n# editando la grafica\n plot(x = year, y = produccion, main = 'produccion', xlab = '', ylab = '', col =  'cornflowerblue', pch = 16, panel.first = grid ())\n\n\n\n# Graficas con ggplot2\n# install.package(ggplot2) # para instalar ggplot2\nlibrary(ggplot2)\n \n# hacer dataframe\npeliculas &lt;- data.frame(year, \n                        produccion)\n \n# graficar utilizando ggplot\n ggplot(data = peliculas, mapping = aes(x = year, y = produccion)) + geom_point() + labs(title = 'produccion')"
  },
  {
    "objectID": "index.html#ejemplo-4-se-utiliza-la-libreria-stringr",
    "href": "index.html#ejemplo-4-se-utiliza-la-libreria-stringr",
    "title": "Trabajos realizados Practica profesional",
    "section": "Ejemplo 4 (Se utiliza la libreria stringr)",
    "text": "Ejemplo 4 (Se utiliza la libreria stringr)\nEn este ejemplo se utilizara las librerias stringr que tiene la funcion de manipular cadenas: copiar, cambiar caracteres, comparar cadenas, etc.\n\nlibrary(stringr)\nlibrary(tidyverse)\n\nEn esta parte se crea un vector con distintos nombre, luego se agrupa por medio de una coma, para que al momento de la impresion quede ordemadamente y separados por coma.\n\nx &lt;- c (\"why\", \"video\", \"cross\", \"extra\", \"deal\", \"authority\")\nstr_length(x)\n\n[1] 3 5 5 5 4 9\n\nstr_c(x, collapse = \",\")\n\n[1] \"why,video,cross,extra,deal,authority\"\n\n\nAqui se realiza un filtrado de datos en la linea de caracteres que tenemos en el vector X, con la finalidad de, mostrar la primera vocal de cada palabra que encontramos en las palabras mostradas en el vector\n\nstr_extract(string = x, pattern = \"[aeiou]\")\n\n[1] NA  \"i\" \"o\" \"e\" \"e\" \"a\"\n\n\nEn este proceso se analiza los caracteres asignados en la variable palabra, donde le solicitamos mostrar los caracteres que se encuentran entre la posición 5 hasta la posición 13.\n\npalabra &lt;- \"Univesidad de Panama\"\nstr_sub(string = palabra, start = 5, end = 13)\n\n[1] \"esidad de\""
  },
  {
    "objectID": "index.html#asignación-1",
    "href": "index.html#asignación-1",
    "title": "Trabajos realizados Practica profesional",
    "section": "Asignación 1",
    "text": "Asignación 1\nSe coloca las librerias que utilizaremos\n\nlibrary(DT)\n\nEn esta parte se procede seleccionar el archivo donde se tranajará.\nLuego de seleccionar y leer el archivo con nombre lista-empresa.csv, se procede ha selecionar la tabla etiqueta y Link con la función selec que serán donde se trabajará los datos.\n\ndocumento_csv &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\lista-empresas.csv\")\nEtiqueta_csv &lt;-select(documento_csv, Etiqueta)\nLink_csv &lt;-select(documento_csv, Link)\n\nEn esta parte se procede a crear una variable con nombre hipervinculo, en la misma se acumulará los link y los nombres de cada banco que aparece en Etiquetas.\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Etiqueta_csv$Etiqueta)){\n  Etiqueta &lt;- (getElement(Etiqueta_csv$Etiqueta, indice))\n  Link &lt;- (getElement(Link_csv$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Etiqueta,\"&lt;/a&gt;\"))\n}\n\nLuego de haber optenido los link y las etiquetas, se procede a transformar los resultados a data.frame.\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nEn este paso se realiza un filtro de las tablas que se desea mostrar, en este caso sería industria, departamentos y la direccion_url que contiene almacenados los hipervinculos con las direcciones web de cada banco.\n\nFiltro_final &lt;-select(documento_csv, Industria, Derpartmento) %&gt;% cbind(.,Direccion_url)\n\nPor ultimo se imprime la variable que contiene todos los resultados implementados anteriormente\n\nFiltro_final %&gt;% datatable(escape = FALSE)"
  },
  {
    "objectID": "Ejemplo_4.html",
    "href": "Ejemplo_4.html",
    "title": "Ejemplo_4",
    "section": "",
    "text": "En este ejemplo se utilizara las librerias stringr que tiene la funcion de manipular cadenas: copiar, cambiar caracteres, comparar cadenas, etc.\n\nlibrary(stringr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ purrr     1.0.1\n✔ forcats   1.0.0     ✔ readr     2.1.4\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nEn esta parte se crea un vector con distintos nombre, luego se agrupa por medio de una coma, para que al momento de la impresion quede ordemadamente y separados por coma.\n\nx &lt;- c (\"why\", \"video\", \"cross\", \"extra\", \"deal\", \"authority\")\nstr_length(x)\n\n[1] 3 5 5 5 4 9\n\nstr_c(x, collapse = \",\")\n\n[1] \"why,video,cross,extra,deal,authority\"\n\n\nAqui se realiza un filtrado de datos en la linea de caracteres que tenemos en el vector X, con la finalidad de, mostrar la primera vocal de cada palabra que encontramos en las palabras mostradas en el vector\n\nstr_extract(string = x, pattern = \"[aeiou]\")\n\n[1] NA  \"i\" \"o\" \"e\" \"e\" \"a\"\n\n\nEn este proceso se analiza los caracteres asignados en la variable palabra, donde le solicitamos mostrar los caracteres que se encuentran entre la posición 5 hasta la posición 13.\n\npalabra &lt;- \"Univesidad de Panama\"\nstr_sub(string = palabra, start = 5, end = 13)\n\n[1] \"esidad de\""
  },
  {
    "objectID": "Ejemplo_3.html",
    "href": "Ejemplo_3.html",
    "title": "Ejemplo_3",
    "section": "",
    "text": "#datos de la primera parte\nyear &lt;- c('2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018')\nproduccion &lt;- c(11, 13, 11, 8, 12, 11, 12, 8, 10)\n \n# graficando con codigo\n plot(x = year, y = produccion)\n\n\n\n# editando la grafica\n plot(x = year, y = produccion, main = 'produccion', xlab = '', ylab = '', col =  'cornflowerblue', pch = 16, panel.first = grid ())\n \n \n# Graficas con ggplot2\n# install.package(ggplot2) # para instalar ggplot2\nlibrary(ggplot2)\n\n\n\n# hacer dataframe\npeliculas &lt;- data.frame(year, \n                        produccion)\n \n# graficar utilizando ggplot\n ggplot(data = peliculas, mapping = aes(x = year, y = produccion)) + geom_point() + labs(title = 'produccion')"
  },
  {
    "objectID": "index.html#asignacion_2",
    "href": "index.html#asignacion_2",
    "title": "Ejemplos_R",
    "section": "Asignacion_2",
    "text": "Asignacion_2\nLibrerias que vamos ha utilizar\n\nlibrary(DT)\nlibrary(readxl)\n\nSe ubica el archivo que vamos a leer en formato xlsx, y se sub-divide las columnas que vamos a trabajar\n\ndocumento &lt;- read_xlsx(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\Datos_ejemplo_2.xlsx\")\nCategoria_xlsx &lt;- select(documento, Category)\nLink_xlsx &lt;- select(documento, Link)\n\nSe realiza la operacion de implementar el hipervinculo, utilizando el link de las paginas y las categorias asignadas\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Categoria_xlsx$Category)){\n  Category &lt;- (getElement(Categoria_xlsx$Category, indice))\n  Link &lt;- (getElement(Link_xlsx$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Category,\"&lt;/a&gt;\"))\n  Hipervinculo\n}\n\nSe determina los link que vamos a utilizar\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nSe procede a seleccionar la tabla que vamos a imprimir, en este caso la de Area y imprimimos los resultados optenidos en la variable Direccion_url\n\nFiltro_final &lt;-select(documento, Area) %&gt;% cbind(.,Direccion_url)\n\nEn este ultimo paso se imprime los resultados en formato datatable\n\nFiltro_final %&gt;% datatable(escape = FALSE)"
  },
  {
    "objectID": "index.html#asignacion-2",
    "href": "index.html#asignacion-2",
    "title": "Trabajos realizados Practica profesional",
    "section": "Asignacion 2",
    "text": "Asignacion 2\nLibrerias que vamos ha utilizar\n\nlibrary(DT)\nlibrary(readxl)\n\nSe ubica el archivo que vamos a leer en formato xlsx, y se sub-divide las columnas que vamos a trabajar\n\ndocumento &lt;- read_xlsx(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\Datos_ejemplo_2.xlsx\")\nCategoria_xlsx &lt;- select(documento, Category)\nLink_xlsx &lt;- select(documento, Link)\n\nSe realiza la operacion de implementar el hipervinculo, utilizando el link de las paginas y las categorias asignadas\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Categoria_xlsx$Category)){\n  Category &lt;- (getElement(Categoria_xlsx$Category, indice))\n  Link &lt;- (getElement(Link_xlsx$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Category,\"&lt;/a&gt;\"))\n  Hipervinculo\n}\n\nSe determina los link que vamos a utilizar\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nSe procede a seleccionar la tabla que vamos a imprimir, en este caso la de Area y imprimimos los resultados optenidos en la variable Direccion_url\n\nFiltro_final &lt;-select(documento, Area) %&gt;% cbind(.,Direccion_url)\n\nEn este ultimo paso se imprime los resultados en formato datatable\n\nFiltro_final %&gt;% datatable(escape = FALSE)"
  },
  {
    "objectID": "index.html#asignacion-3",
    "href": "index.html#asignacion-3",
    "title": "Trabajos realizados Practica profesional",
    "section": "Asignacion 3",
    "text": "Asignacion 3\nSe plantea la libretia que se utilizará\n\nlibrary(stringr)\n\nSe selecciona el archivo que se ejecutara\n\ndocumento_original &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\DatosPeronales.csv\")\n\nEn este paso se selecciona el archivo que se ejecutara, se procede a seleciconar las columnas que se dividirán y se restructura la tabla en 4 columnas, que seria nombre, edad, provincia y distrito\n\ndocumento_dividido &lt;- (documento_original %&gt;% separate(Nombre, into = c(\"Nombre\", \"Edad\"), sep = \"[/-]\") %&gt;% separate(Dirección, into = c(\"Provincia\", \"Distrito\"), sep = \"-\"))\ndocumento_dividido\n\n    Nombre Edad Provincia  Distrito\n1    Juan    12    Coclé   Penonomé\n2     Ana    20    Coclé       Natá\n3   Pedro    34    Coclé        Olá\n4    Rosa     5    Coclé      Antón\n5  Esther    56    Coclé   Penonomé\n6   Mario    17    Coclé   Penonomé\n7  Javier    45    Coclé       Natá\n8  Carlos    23    Coclé        Olá\n9   Dilia    22    Coclé      Antón\n10 Indira    15    Coclé   Penonomé"
  },
  {
    "objectID": "Ejemplo_1.html",
    "href": "Ejemplo_1.html",
    "title": "Ejemplo 1 (Leer archivo CSV con la libreria tidyverse)",
    "section": "",
    "text": "En este paso se coloca la librería que utilizaremos, en este caso sería tidyverse\n\n\nlibrary(tidyverse)\n\n\nluego procedemos ha crear una variable con nombre datos, la misma se le asignará el archivo que se leerá, en este caso sería el archivo con nombre Datos_Ejemplo, el mismo contiene un formato csv.\n\nPor otra parte se utiliza la función read_csv, esta función se encarga de leer un fichero de valores separados por comas (formato CSV) y lo vuelca en un dataframe, incluyéndo gran candidad de parámetros para determinar cómo se realiza la lectura y cómo deberán tratarse los datos leídos\n\ndatos &lt;- read_csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\Datos_Ejemplo.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 22 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): ;Base de datos de productos;;;;;;;;\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nPor ultimo se imprime la información de los datos leidos\n\n\ndatos\n\n# A tibble: 22 × 1\n   `;Base de datos de productos;;;;;;;;`                                        \n   &lt;chr&gt;                                                                        \n 1 \";;;;;;;;;\"                                                                  \n 2 \"IdProducto;NombreProducto;Proveedor;Categor\\xeda;CantidadPorUnidad;PrecioUn…\n 3 \"1;T\\xe9 Dharamsala;Exotic Liquids;Bebidas;10 cajas x 20 bolsas;18.00 \\x80;3…\n 4 \"2;Cerveza tibetana Barley;Exotic Liquids;Bebidas;24 - bot. 12 l;19.00 \\x80;…\n 5 \"3;Sirope de regaliz;Exotic Liquids;Condimentos;12 - bot. 550 ml;10.00 \\x80;…\n 6 \"4;Especias Cajun del chef Anton;New Orleans Cajun Delights;Condimentos;48 -…\n 7 \"5;Mezcla Gumbo del chef Anton;New Orleans Cajun Delights;Condimentos;36 caj…\n 8 \"6;Mermelada de grosellas de la abuela;Grandma Kelly's Homestead;Condimentos…\n 9 \"7;Peras secas org\\xe1nicas del t\\xedo Bob;Grandma Kelly's Homestead;Frutas/…\n10 \"8;Salsa de ar\\xe1ndanos Northwoods;Grandma Kelly's Homestead;Condimentos;12…\n# ℹ 12 more rows"
  },
  {
    "objectID": "index.html#semana-1-ejemplo_1.qmd",
    "href": "index.html#semana-1-ejemplo_1.qmd",
    "title": "Trabajos realizados Practica profesional",
    "section": "",
    "text": "#Se procedio a realizar las instalaciones de los paquetes a utilizar\n#install.packages(\"tidyverse\")\nlibrary(gapminder)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ndata(\"gapminder\")\n#Se muestra una base de datos como ejemplo\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n#Se realiza filtracion de datos\nfilter(gapminder, country =='Mexico')\n\n# A tibble: 12 × 6\n   country continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Mexico  Americas   1952    50.8  30144317     3478.\n 2 Mexico  Americas   1957    55.2  35015548     4132.\n 3 Mexico  Americas   1962    58.3  41121485     4582.\n 4 Mexico  Americas   1967    60.1  47995559     5755.\n 5 Mexico  Americas   1972    62.4  55984294     6809.\n 6 Mexico  Americas   1977    65.0  63759976     7675.\n 7 Mexico  Americas   1982    67.4  71640904     9611.\n 8 Mexico  Americas   1987    69.5  80122492     8688.\n 9 Mexico  Americas   1992    71.5  88111030     9472.\n10 Mexico  Americas   1997    73.7  95895146     9767.\n11 Mexico  Americas   2002    74.9 102479927    10742.\n12 Mexico  Americas   2007    76.2 108700891    11978.\n\n\n\n\n\n\n#datos de la primera parte\nyear &lt;- c('2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018')\nproduccion &lt;- c(11, 13, 11, 8, 12, 11, 12, 8, 10)\n \n# graficando con codigo\n plot(x = year, y = produccion)\n\n\n\n# editando la grafica\n plot(x = year, y = produccion, main = 'produccion', xlab = '', ylab = '', col =  'cornflowerblue', pch = 16, panel.first = grid ())\n\n\n\n# Graficas con ggplot2\n# install.package(ggplot2) # para instalar ggplot2\nlibrary(ggplot2)\n \n# hacer dataframe\npeliculas &lt;- data.frame(year, \n                        produccion)\n \n# graficar utilizando ggplot\n ggplot(data = peliculas, mapping = aes(x = year, y = produccion)) + geom_point() + labs(title = 'produccion')\n\n\n\n\n\n\n\nEn este ejemplo se utilizara las librerias stringr que tiene la funcion de manipular cadenas: copiar, cambiar caracteres, comparar cadenas, etc.\n\nlibrary(stringr)\nlibrary(tidyverse)\n\nEn esta parte se crea un vector con distintos nombre, luego se agrupa por medio de una coma, para que al momento de la impresion quede ordemadamente y separados por coma.\n\nx &lt;- c (\"why\", \"video\", \"cross\", \"extra\", \"deal\", \"authority\")\nstr_length(x)\n\n[1] 3 5 5 5 4 9\n\nstr_c(x, collapse = \",\")\n\n[1] \"why,video,cross,extra,deal,authority\"\n\n\nAqui se realiza un filtrado de datos en la linea de caracteres que tenemos en el vector X, con la finalidad de, mostrar la primera vocal de cada palabra que encontramos en las palabras mostradas en el vector\n\nstr_extract(string = x, pattern = \"[aeiou]\")\n\n[1] NA  \"i\" \"o\" \"e\" \"e\" \"a\"\n\n\nEn este proceso se analiza los caracteres asignados en la variable palabra, donde le solicitamos mostrar los caracteres que se encuentran entre la posición 5 hasta la posición 13.\n\npalabra &lt;- \"Univesidad de Panama\"\nstr_sub(string = palabra, start = 5, end = 13)\n\n[1] \"esidad de\"\n\n\n\n\n\nSe coloca las librerias que utilizaremos\n\nlibrary(DT)\n\nEn esta parte se procede seleccionar el archivo donde se tranajará.\nLuego de seleccionar y leer el archivo con nombre lista-empresa.csv, se procede ha selecionar la tabla etiqueta y Link con la función selec que serán donde se trabajará los datos.\n\ndocumento_csv &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\lista-empresas.csv\")\nEtiqueta_csv &lt;-select(documento_csv, Etiqueta)\nLink_csv &lt;-select(documento_csv, Link)\n\nEn esta parte se procede a crear una variable con nombre hipervinculo, en la misma se acumulará los link y los nombres de cada banco que aparece en Etiquetas.\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Etiqueta_csv$Etiqueta)){\n  Etiqueta &lt;- (getElement(Etiqueta_csv$Etiqueta, indice))\n  Link &lt;- (getElement(Link_csv$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Etiqueta,\"&lt;/a&gt;\"))\n}\n\nLuego de haber optenido los link y las etiquetas, se procede a transformar los resultados a data.frame.\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nEn este paso se realiza un filtro de las tablas que se desea mostrar, en este caso sería industria, departamentos y la direccion_url que contiene almacenados los hipervinculos con las direcciones web de cada banco.\n\nFiltro_final &lt;-select(documento_csv, Industria, Derpartmento) %&gt;% cbind(.,Direccion_url)\n\nPor ultimo se imprime la variable que contiene todos los resultados implementados anteriormente\n\nFiltro_final %&gt;% datatable(escape = FALSE)\n\n\n\n\n\n\n\n\n\nLibrerias que vamos ha utilizar\n\nlibrary(DT)\nlibrary(readxl)\n\nSe ubica el archivo que vamos a leer en formato xlsx, y se sub-divide las columnas que vamos a trabajar\n\ndocumento &lt;- read_xlsx(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\Datos_ejemplo_2.xlsx\")\nCategoria_xlsx &lt;- select(documento, Category)\nLink_xlsx &lt;- select(documento, Link)\n\nSe realiza la operacion de implementar el hipervinculo, utilizando el link de las paginas y las categorias asignadas\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Categoria_xlsx$Category)){\n  Category &lt;- (getElement(Categoria_xlsx$Category, indice))\n  Link &lt;- (getElement(Link_xlsx$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Category,\"&lt;/a&gt;\"))\n  Hipervinculo\n}\n\nSe determina los link que vamos a utilizar\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nSe procede a seleccionar la tabla que vamos a imprimir, en este caso la de Area y imprimimos los resultados optenidos en la variable Direccion_url\n\nFiltro_final &lt;-select(documento, Area) %&gt;% cbind(.,Direccion_url)\n\nEn este ultimo paso se imprime los resultados en formato datatable\n\nFiltro_final %&gt;% datatable(escape = FALSE)\n\n\n\n\n\n\n\n\n\nSe plantea la libretia que se utilizará\n\nlibrary(stringr)\n\nSe selecciona el archivo que se ejecutara\n\ndocumento_original &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\DatosPeronales.csv\")\n\nEn este paso se selecciona el archivo que se ejecutara, se procede a seleciconar las columnas que se dividirán y se restructura la tabla en 4 columnas, que seria nombre, edad, provincia y distrito\n\ndocumento_dividido &lt;- (documento_original %&gt;% separate(Nombre, into = c(\"Nombre\", \"Edad\"), sep = \"[/-]\") %&gt;% separate(Dirección, into = c(\"Provincia\", \"Distrito\"), sep = \"-\"))\ndocumento_dividido\n\n    Nombre Edad Provincia  Distrito\n1    Juan    12    Coclé   Penonomé\n2     Ana    20    Coclé       Natá\n3   Pedro    34    Coclé        Olá\n4    Rosa     5    Coclé      Antón\n5  Esther    56    Coclé   Penonomé\n6   Mario    17    Coclé   Penonomé\n7  Javier    45    Coclé       Natá\n8  Carlos    23    Coclé        Olá\n9   Dilia    22    Coclé      Antón\n10 Indira    15    Coclé   Penonomé"
  },
  {
    "objectID": "index.html#semana-1",
    "href": "index.html#semana-1",
    "title": "Trabajos realizados Practica profesional",
    "section": "",
    "text": "#datos de la primera parte\nyear &lt;- c('2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018')\nproduccion &lt;- c(11, 13, 11, 8, 12, 11, 12, 8, 10)\n \n# graficando con codigo\n plot(x = year, y = produccion)\n\n\n\n# editando la grafica\n plot(x = year, y = produccion, main = 'produccion', xlab = '', ylab = '', col =  'cornflowerblue', pch = 16, panel.first = grid ())\n \n \n# Graficas con ggplot2\n# install.package(ggplot2) # para instalar ggplot2\nlibrary(ggplot2)\n\n\n\n# hacer dataframe\npeliculas &lt;- data.frame(year, \n                        produccion)\n \n# graficar utilizando ggplot\n ggplot(data = peliculas, mapping = aes(x = year, y = produccion)) + geom_point() + labs(title = 'produccion')\n\n\n\n\n\n\n\nEn este ejemplo se utilizara las librerias stringr que tiene la funcion de manipular cadenas: copiar, cambiar caracteres, comparar cadenas, etc.\n\nlibrary(stringr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nEn esta parte se crea un vector con distintos nombre, luego se agrupa por medio de una coma, para que al momento de la impresion quede ordemadamente y separados por coma.\n\nx &lt;- c (\"why\", \"video\", \"cross\", \"extra\", \"deal\", \"authority\")\nstr_length(x)\n\n[1] 3 5 5 5 4 9\n\nstr_c(x, collapse = \",\")\n\n[1] \"why,video,cross,extra,deal,authority\"\n\n\nAqui se realiza un filtrado de datos en la linea de caracteres que tenemos en el vector X, con la finalidad de, mostrar la primera vocal de cada palabra que encontramos en las palabras mostradas en el vector\n\nstr_extract(string = x, pattern = \"[aeiou]\")\n\n[1] NA  \"i\" \"o\" \"e\" \"e\" \"a\"\n\n\nEn este proceso se analiza los caracteres asignados en la variable palabra, donde le solicitamos mostrar los caracteres que se encuentran entre la posición 5 hasta la posición 13.\n\npalabra &lt;- \"Univesidad de Panama\"\nstr_sub(string = palabra, start = 5, end = 13)\n\n[1] \"esidad de\"\n\n\n\n\n\nSe coloca las librerias que utilizaremos\n\nlibrary(DT)\n\nEn esta parte se procede seleccionar el archivo donde se tranajará.\nLuego de seleccionar y leer el archivo con nombre lista-empresa.csv, se procede ha selecionar la tabla etiqueta y Link con la función selec que serán donde se trabajará los datos.\n\ndocumento_csv &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\lista-empresas.csv\")\nEtiqueta_csv &lt;-select(documento_csv, Etiqueta)\nLink_csv &lt;-select(documento_csv, Link)\n\nEn esta parte se procede a crear una variable con nombre hipervinculo, en la misma se acumulará los link y los nombres de cada banco que aparece en Etiquetas.\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Etiqueta_csv$Etiqueta)){\n  Etiqueta &lt;- (getElement(Etiqueta_csv$Etiqueta, indice))\n  Link &lt;- (getElement(Link_csv$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Etiqueta,\"&lt;/a&gt;\"))\n}\n\nLuego de haber optenido los link y las etiquetas, se procede a transformar los resultados a data.frame.\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nEn este paso se realiza un filtro de las tablas que se desea mostrar, en este caso sería industria, departamentos y la direccion_url que contiene almacenados los hipervinculos con las direcciones web de cada banco.\n\nFiltro_final &lt;-select(documento_csv, Industria, Derpartmento) %&gt;% cbind(.,Direccion_url)\n\nPor ultimo se imprime la variable que contiene todos los resultados implementados anteriormente\n\nFiltro_final %&gt;% datatable(escape = FALSE)\n\n\n\n\n\n\n\n\n\nLibrerias que vamos ha utilizar\n\nlibrary(DT)\nlibrary(readxl)\n\nSe ubica el archivo que vamos a leer en formato xlsx, y se sub-divide las columnas que vamos a trabajar\n\ndocumento &lt;- read_xlsx(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\Datos_ejemplo_2.xlsx\")\nCategoria_xlsx &lt;- select(documento, Category)\nLink_xlsx &lt;- select(documento, Link)\n\nSe realiza la operacion de implementar el hipervinculo, utilizando el link de las paginas y las categorias asignadas\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Categoria_xlsx$Category)){\n  Category &lt;- (getElement(Categoria_xlsx$Category, indice))\n  Link &lt;- (getElement(Link_xlsx$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Category,\"&lt;/a&gt;\"))\n  Hipervinculo\n}\n\nSe determina los link que vamos a utilizar\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nSe procede a seleccionar la tabla que vamos a imprimir, en este caso la de Area y imprimimos los resultados optenidos en la variable Direccion_url\n\nFiltro_final &lt;-select(documento, Area) %&gt;% cbind(.,Direccion_url)\n\nEn este ultimo paso se imprime los resultados en formato datatable\n\nFiltro_final %&gt;% datatable(escape = FALSE)\n\n\n\n\n\n\n\n\n\nSe plantea la libretia que se utilizará\n\nlibrary(stringr)\n\nSe selecciona el archivo que se ejecutara\n\ndocumento_original &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\DatosPeronales.csv\")\n\nEn este paso se selecciona el archivo que se ejecutara, se procede a seleciconar las columnas que se dividirán y se restructura la tabla en 4 columnas, que seria nombre, edad, provincia y distrito\n\ndocumento_dividido &lt;- (documento_original %&gt;% separate(Nombre, into = c(\"Nombre\", \"Edad\"), sep = \"[/-]\") %&gt;% separate(Dirección, into = c(\"Provincia\", \"Distrito\"), sep = \"-\"))\ndocumento_dividido\n\n    Nombre Edad Provincia  Distrito\n1    Juan    12    Coclé   Penonomé\n2     Ana    20    Coclé       Natá\n3   Pedro    34    Coclé        Olá\n4    Rosa     5    Coclé      Antón\n5  Esther    56    Coclé   Penonomé\n6   Mario    17    Coclé   Penonomé\n7  Javier    45    Coclé       Natá\n8  Carlos    23    Coclé        Olá\n9   Dilia    22    Coclé      Antón\n10 Indira    15    Coclé   Penonomé"
  },
  {
    "objectID": "Ejemplo_2.html",
    "href": "Ejemplo_2.html",
    "title": "Ejemplo 2 (Se utiliza la libreria gapminder para los datos que vamos a leer y se filtra con filter)",
    "section": "",
    "text": "#Se procedio a realizar las instalaciones de los paquetes a utilizar\n#install.packages(\"tidyverse\")\nlibrary(gapminder)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ndata(\"gapminder\")\n#Se muestra una base de datos como ejemplo\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n#Se realiza filtracion de datos\nfilter(gapminder, country =='Mexico')\n\n# A tibble: 12 × 6\n   country continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Mexico  Americas   1952    50.8  30144317     3478.\n 2 Mexico  Americas   1957    55.2  35015548     4132.\n 3 Mexico  Americas   1962    58.3  41121485     4582.\n 4 Mexico  Americas   1967    60.1  47995559     5755.\n 5 Mexico  Americas   1972    62.4  55984294     6809.\n 6 Mexico  Americas   1977    65.0  63759976     7675.\n 7 Mexico  Americas   1982    67.4  71640904     9611.\n 8 Mexico  Americas   1987    69.5  80122492     8688.\n 9 Mexico  Americas   1992    71.5  88111030     9472.\n10 Mexico  Americas   1997    73.7  95895146     9767.\n11 Mexico  Americas   2002    74.9 102479927    10742.\n12 Mexico  Americas   2007    76.2 108700891    11978."
  },
  {
    "objectID": "Mes_1_Semana_1.html",
    "href": "Mes_1_Semana_1.html",
    "title": "Semana 1",
    "section": "",
    "text": "Ejemplo 1 (Leer archivo CSV con la libreria tidyverse)\n\nEn este paso se coloca la librería que utilizaremos, en este caso sería tidyverse\n\n\nlibrary(tidyverse)\n\n\nluego procedemos ha crear una variable con nombre datos, la misma se le asignará el archivo que se leerá, en este caso sería el archivo con nombre Datos_Ejemplo, el mismo contiene un formato csv.\n\nPor otra parte se utiliza la función read_csv, esta función se encarga de leer un fichero de valores separados por comas (formato CSV) y lo vuelca en un dataframe, incluyéndo gran candidad de parámetros para determinar cómo se realiza la lectura y cómo deberán tratarse los datos leídos\n\ndatos &lt;- read_csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\Datos_Ejemplo.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 22 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): ;Base de datos de productos;;;;;;;;\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nPor ultimo se imprime la información de los datos leidos\n\n\ndatos\n\n# A tibble: 22 × 1\n   `;Base de datos de productos;;;;;;;;`                                        \n   &lt;chr&gt;                                                                        \n 1 \";;;;;;;;;\"                                                                  \n 2 \"IdProducto;NombreProducto;Proveedor;Categor\\xeda;CantidadPorUnidad;PrecioUn…\n 3 \"1;T\\xe9 Dharamsala;Exotic Liquids;Bebidas;10 cajas x 20 bolsas;18.00 \\x80;3…\n 4 \"2;Cerveza tibetana Barley;Exotic Liquids;Bebidas;24 - bot. 12 l;19.00 \\x80;…\n 5 \"3;Sirope de regaliz;Exotic Liquids;Condimentos;12 - bot. 550 ml;10.00 \\x80;…\n 6 \"4;Especias Cajun del chef Anton;New Orleans Cajun Delights;Condimentos;48 -…\n 7 \"5;Mezcla Gumbo del chef Anton;New Orleans Cajun Delights;Condimentos;36 caj…\n 8 \"6;Mermelada de grosellas de la abuela;Grandma Kelly's Homestead;Condimentos…\n 9 \"7;Peras secas org\\xe1nicas del t\\xedo Bob;Grandma Kelly's Homestead;Frutas/…\n10 \"8;Salsa de ar\\xe1ndanos Northwoods;Grandma Kelly's Homestead;Condimentos;12…\n# ℹ 12 more rows\n\n\n\n\nEjemplo 2 (Se utiliza la libreria gapminder para los datos que vamos a leer y se filtra con filter)\n\n#Se procedio a realizar las instalaciones de los paquetes a utilizar\n#install.packages(\"tidyverse\")\nlibrary(gapminder)\nlibrary(tidyverse)\ndata(\"gapminder\")\n#Se muestra una base de datos como ejemplo\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n#Se realiza filtracion de datos\nfilter(gapminder, country =='Mexico')\n\n# A tibble: 12 × 6\n   country continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Mexico  Americas   1952    50.8  30144317     3478.\n 2 Mexico  Americas   1957    55.2  35015548     4132.\n 3 Mexico  Americas   1962    58.3  41121485     4582.\n 4 Mexico  Americas   1967    60.1  47995559     5755.\n 5 Mexico  Americas   1972    62.4  55984294     6809.\n 6 Mexico  Americas   1977    65.0  63759976     7675.\n 7 Mexico  Americas   1982    67.4  71640904     9611.\n 8 Mexico  Americas   1987    69.5  80122492     8688.\n 9 Mexico  Americas   1992    71.5  88111030     9472.\n10 Mexico  Americas   1997    73.7  95895146     9767.\n11 Mexico  Americas   2002    74.9 102479927    10742.\n12 Mexico  Americas   2007    76.2 108700891    11978."
  },
  {
    "objectID": "index.html#mes-1",
    "href": "index.html#mes-1",
    "title": "Trabajos realizados Practica profesional",
    "section": "",
    "text": "#datos de la primera parte\nyear &lt;- c('2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018')\nproduccion &lt;- c(11, 13, 11, 8, 12, 11, 12, 8, 10)\n \n# graficando con codigo\n plot(x = year, y = produccion)\n\n\n\n# editando la grafica\n plot(x = year, y = produccion, main = 'produccion', xlab = '', ylab = '', col =  'cornflowerblue', pch = 16, panel.first = grid ())\n \n \n# Graficas con ggplot2\n# install.package(ggplot2) # para instalar ggplot2\nlibrary(ggplot2)\n\n\n\n# hacer dataframe\npeliculas &lt;- data.frame(year, \n                        produccion)\n \n# graficar utilizando ggplot\n ggplot(data = peliculas, mapping = aes(x = year, y = produccion)) + geom_point() + labs(title = 'produccion')\n\n\n\n\n\n\n\nEn este ejemplo se utilizara las librerias stringr que tiene la funcion de manipular cadenas: copiar, cambiar caracteres, comparar cadenas, etc.\n\nlibrary(stringr)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nEn esta parte se crea un vector con distintos nombre, luego se agrupa por medio de una coma, para que al momento de la impresion quede ordemadamente y separados por coma.\n\nx &lt;- c (\"why\", \"video\", \"cross\", \"extra\", \"deal\", \"authority\")\nstr_length(x)\n\n[1] 3 5 5 5 4 9\n\nstr_c(x, collapse = \",\")\n\n[1] \"why,video,cross,extra,deal,authority\"\n\n\nAqui se realiza un filtrado de datos en la linea de caracteres que tenemos en el vector X, con la finalidad de, mostrar la primera vocal de cada palabra que encontramos en las palabras mostradas en el vector\n\nstr_extract(string = x, pattern = \"[aeiou]\")\n\n[1] NA  \"i\" \"o\" \"e\" \"e\" \"a\"\n\n\nEn este proceso se analiza los caracteres asignados en la variable palabra, donde le solicitamos mostrar los caracteres que se encuentran entre la posición 5 hasta la posición 13.\n\npalabra &lt;- \"Univesidad de Panama\"\nstr_sub(string = palabra, start = 5, end = 13)\n\n[1] \"esidad de\"\n\n\n\n\n\nSe coloca las librerias que utilizaremos\n\nlibrary(DT)\n\nEn esta parte se procede seleccionar el archivo donde se tranajará.\nLuego de seleccionar y leer el archivo con nombre lista-empresa.csv, se procede ha selecionar la tabla etiqueta y Link con la función selec que serán donde se trabajará los datos.\n\ndocumento_csv &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\lista-empresas.csv\")\nEtiqueta_csv &lt;-select(documento_csv, Etiqueta)\nLink_csv &lt;-select(documento_csv, Link)\n\nEn esta parte se procede a crear una variable con nombre hipervinculo, en la misma se acumulará los link y los nombres de cada banco que aparece en Etiquetas.\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Etiqueta_csv$Etiqueta)){\n  Etiqueta &lt;- (getElement(Etiqueta_csv$Etiqueta, indice))\n  Link &lt;- (getElement(Link_csv$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Etiqueta,\"&lt;/a&gt;\"))\n}\n\nLuego de haber optenido los link y las etiquetas, se procede a transformar los resultados a data.frame.\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nEn este paso se realiza un filtro de las tablas que se desea mostrar, en este caso sería industria, departamentos y la direccion_url que contiene almacenados los hipervinculos con las direcciones web de cada banco.\n\nFiltro_final &lt;-select(documento_csv, Industria, Derpartmento) %&gt;% cbind(.,Direccion_url)\n\nPor ultimo se imprime la variable que contiene todos los resultados implementados anteriormente\n\nFiltro_final %&gt;% datatable(escape = FALSE)\n\n\n\n\n\n\n\n\n\nLibrerias que vamos ha utilizar\n\nlibrary(DT)\nlibrary(readxl)\n\nSe ubica el archivo que vamos a leer en formato xlsx, y se sub-divide las columnas que vamos a trabajar\n\ndocumento &lt;- read_xlsx(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\Datos_ejemplo_2.xlsx\")\nCategoria_xlsx &lt;- select(documento, Category)\nLink_xlsx &lt;- select(documento, Link)\n\nSe realiza la operacion de implementar el hipervinculo, utilizando el link de las paginas y las categorias asignadas\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Categoria_xlsx$Category)){\n  Category &lt;- (getElement(Categoria_xlsx$Category, indice))\n  Link &lt;- (getElement(Link_xlsx$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Category,\"&lt;/a&gt;\"))\n  Hipervinculo\n}\n\nSe determina los link que vamos a utilizar\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nSe procede a seleccionar la tabla que vamos a imprimir, en este caso la de Area y imprimimos los resultados optenidos en la variable Direccion_url\n\nFiltro_final &lt;-select(documento, Area) %&gt;% cbind(.,Direccion_url)\n\nEn este ultimo paso se imprime los resultados en formato datatable\n\nFiltro_final %&gt;% datatable(escape = FALSE)\n\n\n\n\n\n\n\n\n\nSe plantea la libretia que se utilizará\n\nlibrary(stringr)\n\nSe selecciona el archivo que se ejecutara\n\ndocumento_original &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\DatosPeronales.csv\")\n\nEn este paso se selecciona el archivo que se ejecutara, se procede a seleciconar las columnas que se dividirán y se restructura la tabla en 4 columnas, que seria nombre, edad, provincia y distrito\n\ndocumento_dividido &lt;- (documento_original %&gt;% separate(Nombre, into = c(\"Nombre\", \"Edad\"), sep = \"[/-]\") %&gt;% separate(Dirección, into = c(\"Provincia\", \"Distrito\"), sep = \"-\"))\ndocumento_dividido\n\n    Nombre Edad Provincia  Distrito\n1    Juan    12    Coclé   Penonomé\n2     Ana    20    Coclé       Natá\n3   Pedro    34    Coclé        Olá\n4    Rosa     5    Coclé      Antón\n5  Esther    56    Coclé   Penonomé\n6   Mario    17    Coclé   Penonomé\n7  Javier    45    Coclé       Natá\n8  Carlos    23    Coclé        Olá\n9   Dilia    22    Coclé      Antón\n10 Indira    15    Coclé   Penonomé"
  },
  {
    "objectID": "Semana_1.html",
    "href": "Semana_1.html",
    "title": "Semana 1",
    "section": "",
    "text": "Ejemplo 1 (Leer archivo CSV con la libreria tidyverse)\n\nEn este paso se coloca la librería que utilizaremos, en este caso sería tidyverse\n\n\nlibrary(tidyverse)\n\n\nluego procedemos ha crear una variable con nombre datos, la misma se le asignará el archivo que se leerá, en este caso sería el archivo con nombre Datos_Ejemplo, el mismo contiene un formato csv.\n\nPor otra parte se utiliza la función read_csv, esta función se encarga de leer un fichero de valores separados por comas (formato CSV) y lo vuelca en un dataframe, incluyéndo gran candidad de parámetros para determinar cómo se realiza la lectura y cómo deberán tratarse los datos leídos\n\ndatos &lt;- read_csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\Datos_Ejemplo.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 22 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): ;Base de datos de productos;;;;;;;;\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nPor ultimo se imprime la información de los datos leidos\n\n\ndatos\n\n# A tibble: 22 × 1\n   `;Base de datos de productos;;;;;;;;`                                        \n   &lt;chr&gt;                                                                        \n 1 \";;;;;;;;;\"                                                                  \n 2 \"IdProducto;NombreProducto;Proveedor;Categor\\xeda;CantidadPorUnidad;PrecioUn…\n 3 \"1;T\\xe9 Dharamsala;Exotic Liquids;Bebidas;10 cajas x 20 bolsas;18.00 \\x80;3…\n 4 \"2;Cerveza tibetana Barley;Exotic Liquids;Bebidas;24 - bot. 12 l;19.00 \\x80;…\n 5 \"3;Sirope de regaliz;Exotic Liquids;Condimentos;12 - bot. 550 ml;10.00 \\x80;…\n 6 \"4;Especias Cajun del chef Anton;New Orleans Cajun Delights;Condimentos;48 -…\n 7 \"5;Mezcla Gumbo del chef Anton;New Orleans Cajun Delights;Condimentos;36 caj…\n 8 \"6;Mermelada de grosellas de la abuela;Grandma Kelly's Homestead;Condimentos…\n 9 \"7;Peras secas org\\xe1nicas del t\\xedo Bob;Grandma Kelly's Homestead;Frutas/…\n10 \"8;Salsa de ar\\xe1ndanos Northwoods;Grandma Kelly's Homestead;Condimentos;12…\n# ℹ 12 more rows\n\n\n\n\nEjemplo 2 (Se utiliza la libreria gapminder para los datos que vamos a leer y se filtra con filter)\n\n#Se procedio a realizar las instalaciones de los paquetes a utilizar\n#install.packages(\"tidyverse\")\nlibrary(gapminder)\nlibrary(tidyverse)\ndata(\"gapminder\")\n#Se muestra una base de datos como ejemplo\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n#Se realiza filtracion de datos\nfilter(gapminder, country =='Mexico')\n\n# A tibble: 12 × 6\n   country continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Mexico  Americas   1952    50.8  30144317     3478.\n 2 Mexico  Americas   1957    55.2  35015548     4132.\n 3 Mexico  Americas   1962    58.3  41121485     4582.\n 4 Mexico  Americas   1967    60.1  47995559     5755.\n 5 Mexico  Americas   1972    62.4  55984294     6809.\n 6 Mexico  Americas   1977    65.0  63759976     7675.\n 7 Mexico  Americas   1982    67.4  71640904     9611.\n 8 Mexico  Americas   1987    69.5  80122492     8688.\n 9 Mexico  Americas   1992    71.5  88111030     9472.\n10 Mexico  Americas   1997    73.7  95895146     9767.\n11 Mexico  Americas   2002    74.9 102479927    10742.\n12 Mexico  Americas   2007    76.2 108700891    11978.\n\n\n\n\nEjemplo 3 (Implementación de graficas utilizando libreria ggplot2)\n\n#datos de la primera parte\nyear &lt;- c('2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018')\nproduccion &lt;- c(11, 13, 11, 8, 12, 11, 12, 8, 10)\n \n# graficando con codigo\n plot(x = year, y = produccion)\n\n\n\n# editando la grafica\n plot(x = year, y = produccion, main = 'produccion', xlab = '', ylab = '', col =  'cornflowerblue', pch = 16, panel.first = grid ())\n\n\n\n# Graficas con ggplot2\n# install.package(ggplot2) # para instalar ggplot2\nlibrary(ggplot2)\n \n# hacer dataframe\npeliculas &lt;- data.frame(year, \n                        produccion)\n \n# graficar utilizando ggplot\n ggplot(data = peliculas, mapping = aes(x = year, y = produccion)) + geom_point() + labs(title = 'produccion')\n\n\n\n\n\n\nEjemplo 4 (Se utiliza la libreria stringr)\nEn este ejemplo se utilizara las librerias stringr que tiene la funcion de manipular cadenas: copiar, cambiar caracteres, comparar cadenas, etc.\n\nlibrary(stringr)\nlibrary(tidyverse)\n\nEn esta parte se crea un vector con distintos nombre, luego se agrupa por medio de una coma, para que al momento de la impresion quede ordemadamente y separados por coma.\n\nx &lt;- c (\"why\", \"video\", \"cross\", \"extra\", \"deal\", \"authority\")\nstr_length(x)\n\n[1] 3 5 5 5 4 9\n\nstr_c(x, collapse = \",\")\n\n[1] \"why,video,cross,extra,deal,authority\"\n\n\nAqui se realiza un filtrado de datos en la linea de caracteres que tenemos en el vector X, con la finalidad de, mostrar la primera vocal de cada palabra que encontramos en las palabras mostradas en el vector\n\nstr_extract(string = x, pattern = \"[aeiou]\")\n\n[1] NA  \"i\" \"o\" \"e\" \"e\" \"a\"\n\n\nEn este proceso se analiza los caracteres asignados en la variable palabra, donde le solicitamos mostrar los caracteres que se encuentran entre la posición 5 hasta la posición 13.\n\npalabra &lt;- \"Univesidad de Panama\"\nstr_sub(string = palabra, start = 5, end = 13)\n\n[1] \"esidad de\"\n\n\n\n\nAsignación 1\nSe coloca las librerias que utilizaremos\n\nlibrary(DT)\n\nEn esta parte se procede seleccionar el archivo donde se tranajará.\nLuego de seleccionar y leer el archivo con nombre lista-empresa.csv, se procede ha selecionar la tabla etiqueta y Link con la función selec que serán donde se trabajará los datos.\n\ndocumento_csv &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\lista-empresas.csv\")\nEtiqueta_csv &lt;-select(documento_csv, Etiqueta)\nLink_csv &lt;-select(documento_csv, Link)\n\nEn esta parte se procede a crear una variable con nombre hipervinculo, en la misma se acumulará los link y los nombres de cada banco que aparece en Etiquetas.\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Etiqueta_csv$Etiqueta)){\n  Etiqueta &lt;- (getElement(Etiqueta_csv$Etiqueta, indice))\n  Link &lt;- (getElement(Link_csv$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Etiqueta,\"&lt;/a&gt;\"))\n}\n\nLuego de haber optenido los link y las etiquetas, se procede a transformar los resultados a data.frame.\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nEn este paso se realiza un filtro de las tablas que se desea mostrar, en este caso sería industria, departamentos y la direccion_url que contiene almacenados los hipervinculos con las direcciones web de cada banco.\n\nFiltro_final &lt;-select(documento_csv, Industria, Derpartmento) %&gt;% cbind(.,Direccion_url)\n\nPor ultimo se imprime la variable que contiene todos los resultados implementados anteriormente\n\nFiltro_final %&gt;% datatable(escape = FALSE)\n\n\n\n\n\n\n\n\nAsignacion 2\nLibrerias que vamos ha utilizar\n\nlibrary(DT)\nlibrary(readxl)\n\nSe ubica el archivo que vamos a leer en formato xlsx, y se sub-divide las columnas que vamos a trabajar\n\ndocumento &lt;- read_xlsx(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\Datos_ejemplo_2.xlsx\")\nCategoria_xlsx &lt;- select(documento, Category)\nLink_xlsx &lt;- select(documento, Link)\n\nSe realiza la operacion de implementar el hipervinculo, utilizando el link de las paginas y las categorias asignadas\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Categoria_xlsx$Category)){\n  Category &lt;- (getElement(Categoria_xlsx$Category, indice))\n  Link &lt;- (getElement(Link_xlsx$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Category,\"&lt;/a&gt;\"))\n  Hipervinculo\n}\n\nSe determina los link que vamos a utilizar\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nSe procede a seleccionar la tabla que vamos a imprimir, en este caso la de Area y imprimimos los resultados optenidos en la variable Direccion_url\n\nFiltro_final &lt;-select(documento, Area) %&gt;% cbind(.,Direccion_url)\n\nEn este ultimo paso se imprime los resultados en formato datatable\n\nFiltro_final %&gt;% datatable(escape = FALSE)\n\n\n\n\n\n\n\n\nAsignacion 3\nSe plantea la libretia que se utilizará\n\nlibrary(stringr)\n\nSe selecciona el archivo que se ejecutara\n\ndocumento_original &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\DatosPeronales.csv\")\n\nEn este paso se selecciona el archivo que se ejecutara, se procede a seleciconar las columnas que se dividirán y se restructura la tabla en 4 columnas, que seria nombre, edad, provincia y distrito\n\ndocumento_dividido &lt;- (documento_original %&gt;% separate(Nombre, into = c(\"Nombre\", \"Edad\"), sep = \"[/-]\") %&gt;% separate(Dirección, into = c(\"Provincia\", \"Distrito\"), sep = \"-\"))\ndocumento_dividido\n\n    Nombre Edad Provincia  Distrito\n1    Juan    12    Coclé   Penonomé\n2     Ana    20    Coclé       Natá\n3   Pedro    34    Coclé        Olá\n4    Rosa     5    Coclé      Antón\n5  Esther    56    Coclé   Penonomé\n6   Mario    17    Coclé   Penonomé\n7  Javier    45    Coclé       Natá\n8  Carlos    23    Coclé        Olá\n9   Dilia    22    Coclé      Antón\n10 Indira    15    Coclé   Penonomé"
  },
  {
    "objectID": "Semana_1_mes_1.html",
    "href": "Semana_1_mes_1.html",
    "title": "Semana 1",
    "section": "",
    "text": "Ejemplo 1 (Leer archivo CSV con la libreria tidyverse)\n\nEn este paso se coloca la librería que utilizaremos, en este caso sería tidyverse\n\n\nlibrary(tidyverse)\n\n\nluego procedemos ha crear una variable con nombre datos, la misma se le asignará el archivo que se leerá, en este caso sería el archivo con nombre Datos_Ejemplo, el mismo contiene un formato csv.\n\nPor otra parte se utiliza la función read_csv, esta función se encarga de leer un fichero de valores separados por comas (formato CSV) y lo vuelca en un dataframe, incluyéndo gran candidad de parámetros para determinar cómo se realiza la lectura y cómo deberán tratarse los datos leídos\n\ndatos &lt;- read_csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\Datos_Ejemplo.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 22 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): ;Base de datos de productos;;;;;;;;\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nPor ultimo se imprime la información de los datos leidos\n\n\ndatos\n\n# A tibble: 22 × 1\n   `;Base de datos de productos;;;;;;;;`                                        \n   &lt;chr&gt;                                                                        \n 1 \";;;;;;;;;\"                                                                  \n 2 \"IdProducto;NombreProducto;Proveedor;Categor\\xeda;CantidadPorUnidad;PrecioUn…\n 3 \"1;T\\xe9 Dharamsala;Exotic Liquids;Bebidas;10 cajas x 20 bolsas;18.00 \\x80;3…\n 4 \"2;Cerveza tibetana Barley;Exotic Liquids;Bebidas;24 - bot. 12 l;19.00 \\x80;…\n 5 \"3;Sirope de regaliz;Exotic Liquids;Condimentos;12 - bot. 550 ml;10.00 \\x80;…\n 6 \"4;Especias Cajun del chef Anton;New Orleans Cajun Delights;Condimentos;48 -…\n 7 \"5;Mezcla Gumbo del chef Anton;New Orleans Cajun Delights;Condimentos;36 caj…\n 8 \"6;Mermelada de grosellas de la abuela;Grandma Kelly's Homestead;Condimentos…\n 9 \"7;Peras secas org\\xe1nicas del t\\xedo Bob;Grandma Kelly's Homestead;Frutas/…\n10 \"8;Salsa de ar\\xe1ndanos Northwoods;Grandma Kelly's Homestead;Condimentos;12…\n# ℹ 12 more rows\n\n\n\n\nEjemplo 2 (Se utiliza la libreria gapminder para los datos que vamos a leer y se filtra con filter)\n\n#Se procedio a realizar las instalaciones de los paquetes a utilizar\n#install.packages(\"tidyverse\")\nlibrary(gapminder)\nlibrary(tidyverse)\ndata(\"gapminder\")\n#Se muestra una base de datos como ejemplo\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n#Se realiza filtracion de datos\nfilter(gapminder, country =='Mexico')\n\n# A tibble: 12 × 6\n   country continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Mexico  Americas   1952    50.8  30144317     3478.\n 2 Mexico  Americas   1957    55.2  35015548     4132.\n 3 Mexico  Americas   1962    58.3  41121485     4582.\n 4 Mexico  Americas   1967    60.1  47995559     5755.\n 5 Mexico  Americas   1972    62.4  55984294     6809.\n 6 Mexico  Americas   1977    65.0  63759976     7675.\n 7 Mexico  Americas   1982    67.4  71640904     9611.\n 8 Mexico  Americas   1987    69.5  80122492     8688.\n 9 Mexico  Americas   1992    71.5  88111030     9472.\n10 Mexico  Americas   1997    73.7  95895146     9767.\n11 Mexico  Americas   2002    74.9 102479927    10742.\n12 Mexico  Americas   2007    76.2 108700891    11978.\n\n\n\n\nEjemplo 3 (Implementación de graficas utilizando libreria ggplot2)\n\n#datos de la primera parte\nyear &lt;- c('2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018')\nproduccion &lt;- c(11, 13, 11, 8, 12, 11, 12, 8, 10)\n \n# graficando con codigo\n plot(x = year, y = produccion)\n\n\n\n# editando la grafica\n plot(x = year, y = produccion, main = 'produccion', xlab = '', ylab = '', col =  'cornflowerblue', pch = 16, panel.first = grid ())\n\n\n\n# Graficas con ggplot2\n# install.package(ggplot2) # para instalar ggplot2\nlibrary(ggplot2)\n \n# hacer dataframe\npeliculas &lt;- data.frame(year, \n                        produccion)\n \n# graficar utilizando ggplot\n ggplot(data = peliculas, mapping = aes(x = year, y = produccion)) + geom_point() + labs(title = 'produccion')\n\n\n\n\n\n\nEjemplo 4 (Se utiliza la libreria stringr)\nEn este ejemplo se utilizara las librerias stringr que tiene la funcion de manipular cadenas: copiar, cambiar caracteres, comparar cadenas, etc.\n\nlibrary(stringr)\nlibrary(tidyverse)\n\nEn esta parte se crea un vector con distintos nombre, luego se agrupa por medio de una coma, para que al momento de la impresion quede ordemadamente y separados por coma.\n\nx &lt;- c (\"why\", \"video\", \"cross\", \"extra\", \"deal\", \"authority\")\nstr_length(x)\n\n[1] 3 5 5 5 4 9\n\nstr_c(x, collapse = \",\")\n\n[1] \"why,video,cross,extra,deal,authority\"\n\n\nAqui se realiza un filtrado de datos en la linea de caracteres que tenemos en el vector X, con la finalidad de, mostrar la primera vocal de cada palabra que encontramos en las palabras mostradas en el vector\n\nstr_extract(string = x, pattern = \"[aeiou]\")\n\n[1] NA  \"i\" \"o\" \"e\" \"e\" \"a\"\n\n\nEn este proceso se analiza los caracteres asignados en la variable palabra, donde le solicitamos mostrar los caracteres que se encuentran entre la posición 5 hasta la posición 13.\n\npalabra &lt;- \"Univesidad de Panama\"\nstr_sub(string = palabra, start = 5, end = 13)\n\n[1] \"esidad de\"\n\n\n\n\nAsignación 1\nSe coloca las librerias que utilizaremos\n\nlibrary(DT)\n\nEn esta parte se procede seleccionar el archivo donde se tranajará.\nLuego de seleccionar y leer el archivo con nombre lista-empresa.csv, se procede ha selecionar la tabla etiqueta y Link con la función selec que serán donde se trabajará los datos.\n\ndocumento_csv &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\lista-empresas.csv\")\nEtiqueta_csv &lt;-select(documento_csv, Etiqueta)\nLink_csv &lt;-select(documento_csv, Link)\n\nEn esta parte se procede a crear una variable con nombre hipervinculo, en la misma se acumulará los link y los nombres de cada banco que aparece en Etiquetas.\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Etiqueta_csv$Etiqueta)){\n  Etiqueta &lt;- (getElement(Etiqueta_csv$Etiqueta, indice))\n  Link &lt;- (getElement(Link_csv$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Etiqueta,\"&lt;/a&gt;\"))\n}\n\nLuego de haber optenido los link y las etiquetas, se procede a transformar los resultados a data.frame.\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nEn este paso se realiza un filtro de las tablas que se desea mostrar, en este caso sería industria, departamentos y la direccion_url que contiene almacenados los hipervinculos con las direcciones web de cada banco.\n\nFiltro_final &lt;-select(documento_csv, Industria, Derpartmento) %&gt;% cbind(.,Direccion_url)\n\nPor ultimo se imprime la variable que contiene todos los resultados implementados anteriormente\n\nFiltro_final %&gt;% datatable(escape = FALSE)\n\n\n\n\n\n\n\n\nAsignacion 2\nLibrerias que vamos ha utilizar\n\nlibrary(DT)\nlibrary(readxl)\n\nSe ubica el archivo que vamos a leer en formato xlsx, y se sub-divide las columnas que vamos a trabajar\n\ndocumento &lt;- read_xlsx(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\Datos_ejemplo_2.xlsx\")\nCategoria_xlsx &lt;- select(documento, Category)\nLink_xlsx &lt;- select(documento, Link)\n\nSe realiza la operacion de implementar el hipervinculo, utilizando el link de las paginas y las categorias asignadas\n\nHipervinculo &lt;- list()\nfor (indice in 1:length(Categoria_xlsx$Category)){\n  Category &lt;- (getElement(Categoria_xlsx$Category, indice))\n  Link &lt;- (getElement(Link_xlsx$Link, indice))\n  Hipervinculo &lt;- c(Hipervinculo, paste0(\"&lt;a href=\",Link,\"&gt;\",Category,\"&lt;/a&gt;\"))\n  Hipervinculo\n}\n\nSe determina los link que vamos a utilizar\n\nDireccion_url &lt;- Hipervinculo %&gt;% do.call(rbind,.) %&gt;% data.frame(Paginas = .)\n\nSe procede a seleccionar la tabla que vamos a imprimir, en este caso la de Area y imprimimos los resultados optenidos en la variable Direccion_url\n\nFiltro_final &lt;-select(documento, Area) %&gt;% cbind(.,Direccion_url)\n\nEn este ultimo paso se imprime los resultados en formato datatable\n\nFiltro_final %&gt;% datatable(escape = FALSE)\n\n\n\n\n\n\n\n\nAsignacion 3\nSe plantea la libretia que se utilizará\n\nlibrary(stringr)\n\nSe selecciona el archivo que se ejecutara\n\ndocumento_original &lt;- read.csv(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\DatosPeronales.csv\")\n\nEn este paso se selecciona el archivo que se ejecutara, se procede a seleciconar las columnas que se dividirán y se restructura la tabla en 4 columnas, que seria nombre, edad, provincia y distrito\n\ndocumento_dividido &lt;- (documento_original %&gt;% separate(Nombre, into = c(\"Nombre\", \"Edad\"), sep = \"[/-]\") %&gt;% separate(Dirección, into = c(\"Provincia\", \"Distrito\"), sep = \"-\"))\ndocumento_dividido\n\n    Nombre Edad Provincia  Distrito\n1    Juan    12    Coclé   Penonomé\n2     Ana    20    Coclé       Natá\n3   Pedro    34    Coclé        Olá\n4    Rosa     5    Coclé      Antón\n5  Esther    56    Coclé   Penonomé\n6   Mario    17    Coclé   Penonomé\n7  Javier    45    Coclé       Natá\n8  Carlos    23    Coclé        Olá\n9   Dilia    22    Coclé      Antón\n10 Indira    15    Coclé   Penonomé"
  },
  {
    "objectID": "index.html#mes-2",
    "href": "index.html#mes-2",
    "title": "Trabajos realizados Practica profesional (Antonio Ramos)",
    "section": "Mes 2",
    "text": "Mes 2"
  },
  {
    "objectID": "index.html#mes-3",
    "href": "index.html#mes-3",
    "title": "Trabajos realizados Practica profesional (Antonio Ramos)",
    "section": "Mes 3",
    "text": "Mes 3"
  },
  {
    "objectID": "index.html#mes-4",
    "href": "index.html#mes-4",
    "title": "Trabajos realizados Practica profesional (Antonio Ramos)",
    "section": "Mes 4",
    "text": "Mes 4"
  },
  {
    "objectID": "index.html#mes-5",
    "href": "index.html#mes-5",
    "title": "Trabajos realizados Practica profesional (Antonio Ramos)",
    "section": "Mes 5",
    "text": "Mes 5"
  },
  {
    "objectID": "index.html#mes-6",
    "href": "index.html#mes-6",
    "title": "Trabajos realizados Practica profesional (Antonio Ramos)",
    "section": "Mes 6",
    "text": "Mes 6"
  },
  {
    "objectID": "Semana_1_mes_2.html",
    "href": "Semana_1_mes_2.html",
    "title": "Semana 1",
    "section": "",
    "text": "En est ejemplo se utilizara la libreria dplyr que empleará filter.\n\nlibrary(dplyr)\n\nPuede ser útil emplear una lista para una condición. En ese caso se ha de realizar.\n\nsetosa &lt;- iris %&gt;%\n  filter(Species==\"setosa\")\nhead(setosa, 5)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n\n\nLa función table realiza tablas de frecuencia (cuenta registros), en este caso se tienen los tres posibles valores que toma la variable Species con el número de registros que tiene cada elemento de la variable, el número de registros que tiene cada nivel del factor, hay un factor que no tiene registros, no desaparece el nivel, simplemente aparece con 0 observaciones.\n\nspecies_to_select = c(\"setosa\",\"virginica\")\nspecies &lt;- iris %&gt;%\n  filter(Species %in% species_to_select)\n\ntable(species$Species)\n\n\n    setosa versicolor  virginica \n        50          0         50 \n\n\n\n\nEstas serian las librerias a utilizar.\n\nlibrary(DT)\nlibrary(readxl)\n\nLuego de convertir el archivo PDF a xlsx se procede a leer el archivo y imprimirlo en un datatable.\nDebo mencionar que para convertir el documento utilicé un convertidor online llamado Adobe.\n\ndatatable(Archivo_Excel&lt;-read_xlsx(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\datos_energia.xlsx\"))"
  },
  {
    "objectID": "Semana_1_mes_2.html#ejemplo-1-creación-y-utilización-de-variable",
    "href": "Semana_1_mes_2.html#ejemplo-1-creación-y-utilización-de-variable",
    "title": "Semana 1",
    "section": "",
    "text": "En est ejemplo se utilizara la libreria dplyr que empleará filter.\n\nlibrary(dplyr)\n\nPuede ser útil emplear una lista para una condición. En ese caso se ha de realizar.\n\nsetosa &lt;- iris %&gt;%\n  filter(Species==\"setosa\")\nhead(setosa, 5)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n\n\nLa función table realiza tablas de frecuencia (cuenta registros), en este caso se tienen los tres posibles valores que toma la variable Species con el número de registros que tiene cada elemento de la variable, el número de registros que tiene cada nivel del factor, hay un factor que no tiene registros, no desaparece el nivel, simplemente aparece con 0 observaciones.\n\nspecies_to_select = c(\"setosa\",\"virginica\")\nspecies &lt;- iris %&gt;%\n  filter(Species %in% species_to_select)\n\ntable(species$Species)\n\n\n    setosa versicolor  virginica \n        50          0         50 \n\n\n\n\nEstas serian las librerias a utilizar.\n\nlibrary(DT)\nlibrary(readxl)\n\nLuego de convertir el archivo PDF a xlsx se procede a leer el archivo y imprimirlo en un datatable.\nDebo mencionar que para convertir el documento utilicé un convertidor online llamado Adobe.\n\ndatatable(Archivo_Excel&lt;-read_xlsx(\"C:\\\\Users\\\\anton\\\\OneDrive\\\\Documentos\\\\Ejemplos_R\\\\datos_energia.xlsx\"))"
  }
]